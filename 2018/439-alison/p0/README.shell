################
TEAM INFO
################

Name1: Zeyuan Hu
EID1: zh4378
CS login: zeyuanhu
Email: iamzeyuanhu@utexas.edu
Unique Number:

################
CS:APP Shell Lab
################

Files:

Makefile	# Compiles your shell program and runs the tests
README		# This file
msh.c		# A shell program that you will write and hand in
mshref		# The reference shell binary.
util.c/h        # Contains provided utilities
jobs.c/h        # Contains job helper routines
design_doc.txt  # Provide your answers to questions and explanations here

#Files for Part 0
fib.c           # Implement Fibonacci here
psh.c           # Implement prototype shell here

#Files for Part 1
handle.c        # Implementation Needed
mykill.c        # Implementation Needed

# The remaining files are used to test your shell
sdriver.pl	# The trace-driven shell driver
trace*.txt	# The 16 trace files that control the shell driver
mshref.out 	# Example output of the reference shell on all 16 traces

# Little C programs that are called by the trace files
myspin.c	# Takes argument <n> and spins for <n> seconds
mysplit.c	# Forks a child that spins for <n> seconds
mystop.c        # Spins for <n> seconds and sends SIGTSTP to itself
myint.c         # Spins for <n> seconds and sends SIGINT to itself

################
Remarks
################

- 'doFib' in fib.c demonstrates how we can get value from child process
- We can use `CMake` to build the program:

  - `mkdir build; cd build; cmake ..; make all` to make binary
  - To enable debug build, we use `cmake .. -DCMAKE_BUILD_TYPE=debug`
  - To enable the test cases, we use `cmake .. -DSHELL_TESTS=1; make test`
  - Put everything together for dev purpose, we do `cmake .. -DCMAKE_BUILD_TYPE=debug -DSHELL_TESTS=1; make test`